/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProduitService } from "../produit.service";
import { ProduitCreateInput } from "./ProduitCreateInput";
import { Produit } from "./Produit";
import { ProduitFindManyArgs } from "./ProduitFindManyArgs";
import { ProduitWhereUniqueInput } from "./ProduitWhereUniqueInput";
import { ProduitUpdateInput } from "./ProduitUpdateInput";

export class ProduitControllerBase {
  constructor(protected readonly service: ProduitService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Produit })
  async createProduit(
    @common.Body() data: ProduitCreateInput
  ): Promise<Produit> {
    return await this.service.createProduit({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Produit] })
  @ApiNestedQuery(ProduitFindManyArgs)
  async produits(@common.Req() request: Request): Promise<Produit[]> {
    const args = plainToClass(ProduitFindManyArgs, request.query);
    return this.service.produits({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Produit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async produit(
    @common.Param() params: ProduitWhereUniqueInput
  ): Promise<Produit | null> {
    const result = await this.service.produit({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Produit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProduit(
    @common.Param() params: ProduitWhereUniqueInput,
    @common.Body() data: ProduitUpdateInput
  ): Promise<Produit | null> {
    try {
      return await this.service.updateProduit({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Produit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProduit(
    @common.Param() params: ProduitWhereUniqueInput
  ): Promise<Produit | null> {
    try {
      return await this.service.deleteProduit({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
