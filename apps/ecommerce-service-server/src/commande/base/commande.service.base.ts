/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Commande as PrismaCommande } from "@prisma/client";

export class CommandeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CommandeCountArgs, "select">): Promise<number> {
    return this.prisma.commande.count(args);
  }

  async commandes<T extends Prisma.CommandeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommandeFindManyArgs>
  ): Promise<PrismaCommande[]> {
    return this.prisma.commande.findMany<Prisma.CommandeFindManyArgs>(args);
  }
  async commande<T extends Prisma.CommandeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommandeFindUniqueArgs>
  ): Promise<PrismaCommande | null> {
    return this.prisma.commande.findUnique(args);
  }
  async createCommande<T extends Prisma.CommandeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommandeCreateArgs>
  ): Promise<PrismaCommande> {
    return this.prisma.commande.create<T>(args);
  }
  async updateCommande<T extends Prisma.CommandeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommandeUpdateArgs>
  ): Promise<PrismaCommande> {
    return this.prisma.commande.update<T>(args);
  }
  async deleteCommande<T extends Prisma.CommandeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommandeDeleteArgs>
  ): Promise<PrismaCommande> {
    return this.prisma.commande.delete(args);
  }
}
