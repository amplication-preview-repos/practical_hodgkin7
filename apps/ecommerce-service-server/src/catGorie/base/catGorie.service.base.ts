/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CatGorie as PrismaCatGorie } from "@prisma/client";

export class CatGorieServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CatGorieCountArgs, "select">): Promise<number> {
    return this.prisma.catGorie.count(args);
  }

  async catGories<T extends Prisma.CatGorieFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CatGorieFindManyArgs>
  ): Promise<PrismaCatGorie[]> {
    return this.prisma.catGorie.findMany<Prisma.CatGorieFindManyArgs>(args);
  }
  async catGorie<T extends Prisma.CatGorieFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CatGorieFindUniqueArgs>
  ): Promise<PrismaCatGorie | null> {
    return this.prisma.catGorie.findUnique(args);
  }
  async createCatGorie<T extends Prisma.CatGorieCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CatGorieCreateArgs>
  ): Promise<PrismaCatGorie> {
    return this.prisma.catGorie.create<T>(args);
  }
  async updateCatGorie<T extends Prisma.CatGorieUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CatGorieUpdateArgs>
  ): Promise<PrismaCatGorie> {
    return this.prisma.catGorie.update<T>(args);
  }
  async deleteCatGorie<T extends Prisma.CatGorieDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CatGorieDeleteArgs>
  ): Promise<PrismaCatGorie> {
    return this.prisma.catGorie.delete(args);
  }
}
